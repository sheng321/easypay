<?php

namespace app\common\service;

use think\Model;

use redis\StringModel;

use think\Exception;

use think\Db;


/**
 * 模型基础数据服务
 * Class ModelService
 * @package service
 */
class ModelService extends Model {
    /**
     * 是否复制到分表
     * 默认以日期分表
     * @var bool
     */
    protected $salve = false;

    protected $createTime = 'create_at';
    protected $updateTime = 'update_at';
    protected $autoWriteTimestamp = 'datetime';

    protected $auto = [];
    protected $insert = [ 'create_by'];
    protected $update = ['update_by','update_at'];


    protected function setCreateByAttr()
    {
        if(app('request')->module() === 'user'){
            $userId = session('user_info.id');
        }elseif(app('request')->module() === 'admin'){
            $userId = session('admin_info.id');
        }else{
            $userId = 0;
        }
        return $userId;
    }


    protected function setUpdateByAttr()
    {
        switch (true) {
            case (!empty(session('admin_info.id'))):
                $userId = session('admin_info.id');
                break;
            case (!empty(session('user_info.id'))):
                $userId = session('user_info.id');
                break;
            default:
                $userId = 0;
                break;
        }
        return $userId;
    }

    protected function setUpdateAtAttr()
    {
        return date('Y-m-d H:i:s');
    }


    protected function setLocationAttr()
    {
        $location = get_location();
        return $location['country'].$location['area'];
    }

    protected function setIpAttr()
    {
        return get_client_ip();
    }


    /**
     * 主键定义
     * @var string
     */
    protected $pk = 'id';





    static public $redisModel;


    public function __construct($data = [])
    {
        parent::__construct($data);

        self::$redisModel = new StringModel();
    }

    //模型事件
    static protected function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        self::event('after_insert', function (ModelService $model) {

            $model->clearCachebyModel($model);
            $model->slave($model);
            $model->redisEvent($model);
        });



        // 一定要用save 和 saveAll 模型方法  必须要加 主键id参数
        self::event('after_update', function (ModelService $model) {

            $model->clearCachebyModel($model);
            $model->slave($model);
            $model->redisEvent($model);

        });

        //User::destroy(1); User::destroy('1,2,3'); User::destroy([1,2,3]);
        self::event('after_delete', function (ModelService $model) {
            $model->clearCachebyModel($model);
            $model->deleteRedis($model);
        });


     }

    /**
     * 自动根据标签清除缓存
     * @param ModelService $model
     * @return bool
     */
    static protected function clearCachebyModel(ModelService $model){
        $obj = get_object_vars($model);
        clear_cache($obj['name']);
    }




    //插入/更新到分表
    static protected function slave(ModelService $model){

        $obj = get_object_vars($model);

        //判断是否复制
        if(!isset($obj['salve']) || $obj['salve']==false) return true;

        //以日期分表
        $newTable = $obj['table'].'_'.date('Ym');

        // 启动事务
        Db::startTrans();
        try {
            $sql =  "CREATE TABLE IF NOT EXISTS  {$newTable}  LIKE {$obj['table']}";
            Db::execute($sql);
            $data =  Db::table($obj['table'])->find($model->id);
            if(empty($data)) throw new Exception("未查询到数据！");
            Db::table($newTable)->insert($data, true);//存在就更新
            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
        }
    }


    //更新插入redis
    static protected function redisEvent(ModelService $model){


        $obj = get_object_vars($model);

        //判断
        if(!isset($obj['redis']) || !isset($obj['redis']['is_open']) || $obj['redis']['is_open'] == false) return true;

        //防止缓存穿透
        $lockKey = 'lock:'.$obj['name'].':'.$model->id;
        $random = mt_rand(1,100000);
        $ok =  $model->lockRedis($lockKey,$random);
        if ($ok) {
            //获取到锁
            try {
                $data = $model::get($model->id);//查询数据库获取所有数据
                if(empty($data)) throw new Exception("未查询到数据！");

                $res = self::saveRedis($obj,$data);
                if(!$res) throw new Exception("更新redis失败！");

            } catch (\Exception $e) {
                halt($e->getMessage());
            }

            $model->lockRedis($lockKey,$random,1);
        }

    }


    static protected function deleteRedis(ModelService $model){

        //防止缓存穿透
        $obj = get_object_vars($model);

        //判断
        if(!isset($obj['redis']) || !isset($obj['redis']['is_open']) || $obj['redis']['is_open'] == false) return true;

        //判断
        if(!isset($obj['redis'])) return true;

        $lockKey = 'lock:'.$obj['name'].':'.$model->id;
        $random = mt_rand(1,100000);
        $ok =  $model->lockRedis($lockKey,$random);
        if ($ok) {
            //获取到锁
            try {

                self::$redisModel->key = $obj['redis']['key'];//设置key

                self::$redisModel->newQuery()->where('id', $model->id)->delete();
            } catch (\Exception $e) {
                halt($e->getMessage());
            }

            $model->lockRedis($lockKey,$random,1);
        }
    }

    /**
     * @param $lockKey
     * @param $random 随机数
     * @param int $ttl 过期时间
     * @param int $type 建立锁 1 解锁
     * @return bool|int 0
     * 引入了一个随机数，这是为了防止逻辑处理时间过长导致锁的过期时间已经失效，这时候下一个请求就获得了锁，但是前一个请求在逻辑处理完直接删除了锁。
     */
    static public function lockRedis($lockKey,$random,$type = 0,$ttl = 5){
        if($type == 0){
            $ok = false;
            if(!(self::$redisModel->instance()->exists($lockKey))){
                self::$redisModel->instance()->setex( $lockKey , $ttl , $random );
                $ok = self::$redisModel->instance()->exists($lockKey);
            }

            return $ok;
        }else{
            if (self::$redisModel->instance()->get($lockKey) == $random) {
                self::$redisModel->instance()->del($lockKey);
            }
        }

    }

    /**
     * 获取单条redis记录
     * @param $where  单个ID 或者数组
     * @return bool|mixed|null
     */
    static public function quickGet($where){
       $data = new static();
        $obj = get_object_vars($data);

        self::$redisModel->key = $obj['redis']['key'];//设置key

        $quickGet =  self::$redisModel->newQuery();

        if(is_array($where)){
            if(!is_array($obj['redis']['keyArr'])) return false;
            foreach ($obj['redis']['keyArr'] as $k =>$v){
                if(isset($where[$v]))  $quickGet =  $quickGet->where($v,$where[$v]);
            }
            $search = $where;
        }else{
            //传入为ID的时候
            $quickGet =  $quickGet->where('id',$where);
            $search['id'] = $where;
        }

        $res =  $quickGet->first();

        //调试模式 先关闭
      if(!empty($res))  return json_decode($res,true);

        //查询数据库
        $res = $data::where($search)->find();
        if(empty($res))  return false;
        self::saveRedis($obj,$res);

        return $res;
    }

    /**
     * 添加或者更新redis
     * @param $obj  当前模型的属性
     * @param $data  要更新的数据
     * @return bool
     */
    static public function saveRedis($obj,$data){

        if(!isset($obj['redis']['keyArr'])) return false;
        if(empty($obj['redis']['key'])) return false;
        if(!isset($data['id'])) return false;
        self::$redisModel->key = $obj['redis']['key'];//设置key
        if(!empty($obj['redis']['ttl'])) self::$redisModel->ttl = $obj['redis']['ttl'];//设置过期时间

        $keyArr = [];
        foreach ($obj['redis']['keyArr'] as $k => $v){
            $keyArr[$v] = '';
            if(isset($data[$v])) $keyArr[$v] = $data[$v];
        }

        //先删除
        self::$redisModel->newQuery()->where('id', $data['id'])->delete();
        //再插入
        self::$redisModel->insert($keyArr,$data);

        return true;
    }


    /**
     * 修改字段值
     * @param $update
     * @return \think\response\Json
     */
    public static function editField($update) {

        $model = new static();

        //使用事物保存数据
        $model->startTrans();
        $save = $model->save([$update['field'] => $update['value'],'id'=>$update['id']],['id'=>$update['id']]);
        if (!$save) {
            $model->rollback();
            return __error('数据有误，请稍后再试！');
        }
        $model->commit();
        return __success('信息修改成功！');
    }


    /**
     * 添加
     * @param $insert 需要插入的数据
     */
    public function __add($insert,$msg = '') {

        $model = new static();

        //使用事物保存数据
        $model->startTrans();
        $save = $model->save($insert);
        if (!$save) {
            $model->rollback();
            $msg = '数据有误，请稍后再试！!';
            return __error($msg);
        }
        $model->commit();
        empty($msg) && $msg = '添加成功!';
        return __success($msg);
    }


    /**
     * 修改信息
     * @param $update 需要修改的数据
     * @return \think\response\Json
     */
    public function __edit($update,$msg = '') {

        $model = new static();

        //使用事物保存数据
        $model->startTrans();
        $save = $model->save($update,['id'=>$update['id']]);
        if (!$save) {
            $model->rollback();
            $msg = '数据有误，请稍后再试！';
            return __error($msg);
        }
        $model->commit();

        empty($msg) && $msg = '修改成功';
        return __success($msg);

    }


    /**
     * 删除信息
     * @param $$get 需要删除的数据
     * @return \think\response\Json
     */
    public function __del($get,$msg = '') {

        $model = new static();

        //使用事物保存数据
        $model->startTrans();
        $del = $model::destroy($get['id']);
        if (!($del >= 1) ) {
            $model->rollback();
            $msg = '数据有误，请稍后再试！';
            return __error($msg);
        }
        $model->commit();

        empty($msg) && $msg = '删除成功';
        return __success($msg);

    }




}